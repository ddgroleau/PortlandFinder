name: Deploy to Linode Compute Instance

on:
  push:
    branches: ["master"]

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: dotnet build
      - name: Run Tests
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'
          
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/portland-finder:latest
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Pull and Run Docker Image on Linode Remote Server
        uses: appleboy/ssh-action@master
        env:
          HOST_PORT: ${{ secrets.HOST_PORT }}
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_PORT: ${{ secrets.PG_PORT }}
          PG_USER: ${{ secrets.PG_USER }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          DOCKER_NETWORK: ${{ secrets.DOCKER_NETWORK }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }} 
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: HOST_PORT,PG_HOST,PG_PORT,PG_USER,PG_PASSWORD,PG_DATABASE,DOCKER_NETWORK
          script: |
            export envArray=( $HOST_PORT $PG_HOST $PG_PORT $PG_USER $PG_PASSWORD $PG_DATABASE $DOCKER_NETWORK ) \
            && docker pull thoughtspring/portland-finder \
            && if [[ -z $(docker container ls -a | grep "portland-finder") ]]; \
            then echo "No container found. Starting portland-finder container..."; \
            else docker stop portland-finder && docker rm portland-finder; \
            fi \
            && docker run -d -p "${envArray[0]}":80 --network "${envArray[6]}" --name portland-finder --restart always \
            -e PG_HOST="${envArray[1]}" \
            -e PG_PORT="${envArray[2]}" \
            -e PG_USER="${envArray[3]}" \
            -e PG_PASSWORD="${envArray[4]}" \
            -e PG_DATABASE="${envArray[5]}" \
            thoughtspring/portland-finder \
            && exit \
            && exit 0;
